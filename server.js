require("dotenv").config();
const Fastify = require("fastify");
const { Telegraf, Markup } = require("telegraf");
const fs = require("fs");

const fastify = Fastify({ logger: false });
const bot = new Telegraf(process.env.TELEGRAM_TOKEN);
const OWNER_ID = 7797626310;

const translations = {
  ru: {
    greeting: "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç A.D.E.I.T.\n\n–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏ –ø–æ amoCRM. –ü—Ä–æ—Å—Ç–æ –∑–∞–¥–∞–π —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å!",
    waiting: "üìû –í–∞–º –æ—Ç–≤–µ—Ç–∏—Ç –ø–µ—Ä–≤—ã–π –æ—Å–≤–æ–±–æ–¥–∏–≤—à–∏–π—Å—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫. –°–ø–∞—Å–∏–±–æ –∑–∞ –æ–∂–∏–¥–∞–Ω–∏–µ!",
  },
  uz: {
    greeting: "üëã Salom! Men A.D.E.I.T. yordamchisiman.\n\nMen amoCRM bo‚Äòyicha savollarga yordam beraman. Savolingizni yuboring!",
    waiting: "üìû Birinchi bo'shashgan xodim javob beradi. Kutganingiz uchun rahmat!",
  },
  kz: {
    greeting: "üëã –°”ô–ª–µ–º! –ú–µ–Ω A.D.E.I.T. –∫”©–º–µ–∫—à—ñ—Å—ñ–º—ñ–Ω.\n\n–ú–µ–Ω amoCRM –±–æ–π—ã–Ω—à–∞ —Å“±—Ä–∞“õ—Ç–∞—Ä—ã“£–∞ –∫”©–º–µ–∫—Ç–µ—Å–µ–º—ñ–Ω. –°“±—Ä–∞“ì—ã“£–¥—ã –∂—ñ–±–µ—Ä.",
    waiting: "üìû –ë—ñ—Ä—ñ–Ω—à—ñ –±–æ—Å–∞–π—Ç—ã–Ω “õ—ã–∑–º–µ—Ç–∫–µ—Ä –∂–∞—É–∞–ø –±–µ—Ä–µ–¥—ñ. –ö“Ø—Ç–∫–µ–Ω—ñ“£ “Ø—à—ñ–Ω —Ä–∞—Ö–º–µ—Ç!",
  },
  qq: {
    greeting: "üëã Salam! Men A.D.E.I.T. jardemshisimmen.\n\nMen sagan amoCRM haqqinda jardem beremen. Sawalyndi jaz.",
    waiting: "üìû Birin≈üi bo'saƒüan xodim jawap beredi. K√ºtkeni√± √º≈üin rahmet!",
  },
};

let users = {};
try {
  users = JSON.parse(fs.readFileSync("users.json"));
} catch (error) {
  console.error("–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è users.json:", error);
}

function saveUsers() {
  fs.writeFileSync("users.json", JSON.stringify(users, null, 2));
}

const pendingReplies = {};

bot.start(async (ctx) => {
  const userId = ctx.from.id;
  users[userId] = { lang: null, notified: false };
  saveUsers();

  await ctx.reply(
    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ / –¢—ñ–ª–¥—ñ —Ç–∞“£–¥–∞“£—ã–∑ / Tilni tanlang / Tildi ta≈Ñla≈Ñ:",
    Markup.inlineKeyboard([
      [{ text: "–†—É—Å—Å–∫–∏–π üá∑üá∫", callback_data: "ru" }],
      [{ text: "Qaraqalpaqsha üá∑üáº", callback_data: "qq" }],
      [{ text: "O‚Äòzbekcha üá∫üáø", callback_data: "uz" }],
      [{ text: "“ö–∞–∑–∞“õ—à–∞ üá∞üáø", callback_data: "kz" }],
    ])
  );
});

bot.action(["ru", "qq", "uz", "kz"], async (ctx) => {
  const userId = ctx.from.id;
  const lang = ctx.match.input;

  if (!users[userId]) {
    users[userId] = { notified: false };
  }
  users[userId].lang = lang;
  saveUsers();

  try {
    await ctx.editMessageText("üëå", { reply_markup: { inline_keyboard: [] } });

    setTimeout(async () => {
      try {
        await ctx.deleteMessage();
      } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:", error);
      }
    }, 1500);

    await ctx.reply(translations[lang].greeting);
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞:", error);
  }
});

bot.on("text", async (ctx) => {
  const senderId = ctx.from.id;

  if (pendingReplies[senderId]) {
    const targetUserId = pendingReplies[senderId];
    delete pendingReplies[senderId];

    const replyText = ctx.message?.text || "";

    if (!replyText.trim()) {
      return ctx.reply("‚ùå –û—à–∏–±–∫–∞: –ø—É—Å—Ç–æ–π —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è.");
    }

    try {
      await ctx.telegram.sendMessage(targetUserId, replyText);
      await ctx.reply("‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∫–ª–∏–µ–Ω—Ç—É.");
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–≤–µ—Ç–∞ –∫–ª–∏–µ–Ω—Ç—É:", error);
      await ctx.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–≤–µ—Ç–∞ –∫–ª–∏–µ–Ω—Ç—É.");
    }

    return;
  }

  const lang = users[senderId]?.lang || "ru";

  if (!users[senderId]) {
    users[senderId] = { lang, notified: false };
  }

  if (!users[senderId].notified) {
    await ctx.reply(translations[lang].waiting);
    users[senderId].notified = true;
    saveUsers();
  }

  try {
    await ctx.telegram.sendMessage(
      OWNER_ID,
      `üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞\nID: ${senderId}\n–¢–µ–∫—Å—Ç: ${ctx.message.text}\n–Ø–∑—ã–∫: ${translations[lang] ? lang : "ru"}`,
      Markup.inlineKeyboard([
        [Markup.button.callback("–û—Ç–≤–µ—Ç–∏—Ç—å –∫–ª–∏–µ–Ω—Ç—É", `reply_${senderId}`)]
      ])
    );
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Å—ã–ª–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤–ª–∞–¥–µ–ª—å—Ü—É:", error);
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–û—Ç–≤–µ—Ç–∏—Ç—å –∫–ª–∏–µ–Ω—Ç—É"
bot.on('callback_query', async (ctx) => {
  const data = ctx.callbackQuery.data;

  if (data.startsWith('reply_')) {
    const userId = data.split('_')[1];
    pendingReplies[ctx.from.id] = userId;

    await ctx.answerCbQuery();
    await ctx.reply("üé§ –ó–∞–ø–∏—à–∏—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–π –æ—Ç–≤–µ—Ç –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞.");
  } else {
    await ctx.answerCbQuery();
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤—ã—Ö –∏ –∞—É–¥–∏–æ —Å–æ–æ–±—â–µ–Ω–∏–π (–æ—Ç –∫–ª–∏–µ–Ω—Ç–∞ –∏ –≤–ª–∞–¥–µ–ª—å—Ü–∞)
bot.on(["voice", "audio"], async (ctx) => {
  const senderId = ctx.from.id;
  const messageType = ctx.message.voice ? "voice" : "audio";
  const file = ctx.message[messageType];
  const lang = users[senderId]?.lang || "ru";

  const targetUserId = pendingReplies[senderId];

  // === –ï—Å–ª–∏ —ç—Ç–æ –æ—Ç–≤–µ—Ç –≤–ª–∞–¥–µ–ª—å—Ü–∞ –∫–ª–∏–µ–Ω—Ç—É ===
  if (senderId === OWNER_ID && targetUserId) {
    try {
      if (messageType === "voice") {
        await ctx.telegram.sendVoice(targetUserId, file.file_id);
      } else {
        await ctx.telegram.sendAudio(targetUserId, file.file_id);
      }

      await ctx.reply("‚úÖ –ì–æ–ª–æ—Å–æ–≤–æ–π –æ—Ç–≤–µ—Ç –∫–ª–∏–µ–Ω—Ç—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω");
      delete pendingReplies[senderId];
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Å—ã–ª–∫–µ –æ—Ç–≤–µ—Ç–∞ –∫–ª–∏–µ–Ω—Ç—É:", error);
      await ctx.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Å—ã–ª–∫–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –∏–ª–∏ –∞—É–¥–∏–æ.");
    }
    return;
  }

  // === –ò–Ω–∞—á–µ ‚Äî —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞ –≤–ª–∞–¥–µ–ª—å—Ü—É ===
  if (!users[senderId]) {
    users[senderId] = { lang, notified: false };
  }

  if (!users[senderId].notified) {
    await ctx.reply(translations[lang].waiting);
    users[senderId].notified = true;
    saveUsers();
  }

  try {
    if (messageType === "voice") {
      await ctx.telegram.sendVoice(OWNER_ID, file.file_id);
    } else {
      await ctx.telegram.sendAudio(OWNER_ID, file.file_id);
    }

    await ctx.telegram.sendMessage(
      OWNER_ID,
      `–Ø–∑—ã–∫ –∫–ª–∏–µ–Ω—Ç–∞: ${lang}`,
      Markup.inlineKeyboard([Markup.button.callback("–û—Ç–≤–µ—Ç–∏—Ç—å –∫–ª–∏–µ–Ω—Ç—É", `reply_${senderId}`)])
    );
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Å—ã–ª–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞:", error);
    await ctx.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Å—ã–ª–∫–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –∏–ª–∏ –∞—É–¥–∏–æ.");
  }
});

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ webhook-–æ–±—Ä–∞–±–æ—Ç–∫–∏
fastify.post("/webhook", async (request, reply) => {
  try {
    await bot.handleUpdate(request.body);
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook:", error);
  }
  reply.send({ status: "ok" });
});

fastify.get("/", async (request, reply) => {
  return "Bot is alive!";
});

const PORT = process.env.PORT || 10000;
fastify.listen({ port: PORT, host: "0.0.0.0" }, async (err) => {
  if (err) {
    console.error("–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ Fastify:", err);
    process.exit(1);
  }
  console.log(`üåê Fastify —Å–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);

  try {
    const webhookUrl = `${process.env.RENDER_EXTERNAL_URL || "https://ade79bot.onrender.com"}/webhook`;
    await bot.telegram.setWebhook(webhookUrl);
    console.log("‚úÖ Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω:", webhookUrl);
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ Webhook:", error);
  }
});
